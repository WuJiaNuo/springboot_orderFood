{"remainingRequest":"F:\\project\\ksmg\\basemf-sig\\exam_vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\project\\ksmg\\basemf-sig\\exam_vue\\src\\components\\Custom\\TreeSelect\\TreeModal.vue?vue&type=style&index=0&id=447aa1f8&lang=scss&module=true&","dependencies":[{"path":"F:\\project\\ksmg\\basemf-sig\\exam_vue\\src\\components\\Custom\\TreeSelect\\TreeModal.vue","mtime":1695044329291},{"path":"F:\\project\\ksmg\\basemf-sig\\exam_vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\project\\ksmg\\basemf-sig\\exam_vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1655715156000},{"path":"F:\\project\\ksmg\\basemf-sig\\exam_vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"F:\\project\\ksmg\\basemf-sig\\exam_vue\\node_modules\\sass-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\project\\ksmg\\basemf-sig\\exam_vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\project\\ksmg\\basemf-sig\\exam_vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLkVsRGlhbG9nIHsKICA6Z2xvYmFsIC5lbC1kaWFsb2dfX2JvZHkgewogICAgcGFkZGluZy10b3A6IDBweCAhaW1wb3J0YW50OwogIH0KfQo="},{"version":3,"sources":["TreeModal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkKA;AACA;AACA;AACA;AACA","file":"TreeModal.vue","sourceRoot":"src/components/Custom/TreeSelect","sourcesContent":["<template>\n  <div>\n    <el-dialog :title=\"treeTitle\" :visible=\"visible\" :class=\"$style.ElDialog\" width=\"400px\" append-to-body\n               @close=\"close\">\n      <el-input v-model=\"searchValue\" placeholder=\"请输入关键字过滤\" style=\"margin-bottom:10px;\"/>\n      <el-tag>当前选择：{{ selectedName }}</el-tag>\n      <el-tree\n        ref=\"tree\"\n        :data=\"treeData\"\n        node-key=\"id\"\n        :default-expanded-keys=\"defaultExpandedKeys\"\n        :filter-node-method=\"filterNode\"\n        :expand-on-click-node=\"false\"\n        @current-change=\"handleTreeSelectChange\"\n        :props=\"props\"\n        v-if=\"isLazy!=true\"\n      />\n      <el-tree\n        ref=\"tree\"\n        node-key=\"id\"\n        :props=\"treeProps\"\n        :load=\"loadNodeByParent\"\n        lazy\n        @current-change=\"handleTreeSelectChange\"\n        v-if=\"isLazy==true\"\n      >\n      </el-tree>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" @click=\"confirm\">确定</el-button>\n        <el-button @click=\"close\">关闭</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n<script>\n    import sysDeptApi from '@/api/system/sysDept'\n    export default {\n        props: {\n            dataTree: {\n                type: Array,\n                required: false\n            },\n            treeId: {\n                type: String,\n                default: '',\n                required: false\n            },\n            treeTitle: {\n                type: String,\n                default: '',\n                required: false\n            },\n            isLazy: {\n                type: Boolean,\n                default: false\n            },\n            props: {\n                type: Object,\n                default: function () {\n                    return {\n                        label: 'name',\n                        children: 'children',\n                        isLeaf: 'isLeaf'\n                    }\n                }\n            }\n        },\n        data() {\n            return {\n                treeProps: {\n                    label: 'name',\n                    id:'id',\n                    children: 'childlist',\n                    isLeaf: 'leaf'\n                },\n                visible: false,\n                treeData: [],\n                searchValue: '',\n                defaultExpandedKeys: [],\n                selectedValue: '',\n                selectedName: ''\n            }\n        },\n        watch: {\n            searchValue(value) {\n                this.$refs.tree.filter(value)\n            }\n        },\n        methods: {\n            show(id, name) {\n                this.searchValue = ''\n                this.defaultExpandedKeys = []\n                this.selectedValue = id\n                this.selectedName = name\n                if(this.isLazy==false){\n                    this.loadTree()\n                }\n                this.visible = true\n            },\n            loadNodeByParent(node, resolve) {\n                if (node.level === 0) {\n                    //调用后台查询第一级别\n                    sysDeptApi.findNodesByParent('0').then(response => {\n                        resolve(response.data);\n                    })\n                }else{\n                    let parentId = node.data.id;\n                    sysDeptApi.findNodesByParent(parentId).then(response => {\n                        resolve(response.data);\n                    })\n                }\n            },\n            loadTree() {\n                this.treeData = this.dataTree\n                //   this.$api.system.organization.tree()\n                //     .then(res => {\n                //       this.treeData = res.data\n                //       // 默认展开根节点\n                //       this.defaultExpandedKeys.push(this.treeData[0].id)\n                //       // 默认展开当前节点\n                //       this.defaultExpandedKeys.push(this.selectedValue)\n                //     })\n\n                //this.treeData = [{id:'1',label:'一级',children:[{id:'2',label:'二级1'},{id:'3',label:'二级2'}]}]\n                // 默认展开根节点\n                if(this.isLazy != 'true'){\n                    this.defaultExpandedKeys.push(this.treeData[0].id)\n                    // 默认展开当前节点\n                    this.defaultExpandedKeys.push(this.treeId)\n                }\n            },\n            close() {\n                this.visible = false\n            },\n            confirm() {\n                this.$emit('ok', this.selectedValue, this.selectedName)\n                this.visible = false\n            },\n            // 树节点选中改变\n            handleTreeSelectChange(data) {\n                this.selectedValue = data.id\n                if(data.label) {\n                    this.selectedName = data.label\n                }else{\n                    this.selectedName = data.name\n                }\n            },\n            filterNode(value, data) {\n                if (!value) return true\n                if(data.label){\n                    return data.label.indexOf(value) !== -1\n                }else{\n                    return data.name.indexOf(value) !== -1\n                }\n            }\n\n        }\n    }\n\n</script>\n\n<style lang=\"scss\" module>\n  .ElDialog {\n    :global .el-dialog__body {\n      padding-top: 0px !important;\n    }\n  }\n</style>\n\n"]}]}
