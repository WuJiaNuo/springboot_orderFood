{"remainingRequest":"F:\\project\\ksmg\\exam-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\project\\ksmg\\exam-vue\\src\\views\\system\\sysUser\\treelist.vue?vue&type=style&index=0&id=66fc1a69&lang=css&","dependencies":[{"path":"F:\\project\\ksmg\\exam-vue\\src\\views\\system\\sysUser\\treelist.vue","mtime":1697564401762},{"path":"F:\\project\\ksmg\\exam-vue\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\project\\ksmg\\exam-vue\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1655715156000},{"path":"F:\\project\\ksmg\\exam-vue\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"F:\\project\\ksmg\\exam-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\project\\ksmg\\exam-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmVsLWhlYWRlciB7CiAgYmFja2dyb3VuZC1jb2xvcjogI0IzQzBEMTsKICBjb2xvcjogIzMzMzsKICBsaW5lLWhlaWdodDogNjBweDsKfQoKLmVsLWFzaWRlIHsKICBjb2xvcjogIzMzMzsKfQoKLnVwbG9hZC1kZW1vIHsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7CiAgbWFyZ2luLWxlZnQ6IDhweDsKfQo="},{"version":3,"sources":["treelist.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkNA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"treelist.vue","sourceRoot":"src/views/system/sysUser","sourcesContent":["<template>\n  <el-container style=\"height: 100%; border: 1px solid #eee\">\n    <el-aside width=\"200px\" style=\"background-color: rgb(238, 241, 246)\">\n      <el-input v-model=\"searchDeptValue\" placeholder=\"请输入关键字过滤\" style=\"margin-bottom:10px;\"/>\n      <el-tag>当前选择：{{ selectedDeptName }}</el-tag>\n      <el-tree\n        ref=\"eltree\"\n        :data=\"dataDeptTree\"\n        node-key=\"id\"\n        :default-expand-all=\"true\"\n        :expand-on-click-node=\"false\"\n        :default-expanded-keys=\"defaultDeptExpandedKeys\"\n        :filter-node-method=\"filterDeptNode\"\n        @current-change=\"handleDeptTreeSelectChange\"\n      />\n    </el-aside>\n    <el-container>\n      <el-main>\n        <div class=\"app-container\">\n          <div class=\"search-div\">\n            <el-form label-width=\"70px\" size=\"small\">\n              <el-row>\n                <el-col :span=\"8\">\n                  <el-form-item label=\"关 键 字\">\n                    <el-input style=\"width: 95%\" v-model=\"searchObj.keyword\" placeholder=\"用户名/姓名/手机号码\"></el-input>\n                  </el-form-item>\n                </el-col>\n                <el-col :span=\"8\">\n                  <el-form-item label=\"操作时间\">\n                    <el-date-picker\n                      v-model=\"createTimes\"\n                      type=\"datetimerange\"\n                      range-separator=\"至\"\n                      start-placeholder=\"开始时间\"\n                      end-placeholder=\"结束时间\"\n                      value-format=\"yyyy-MM-dd HH:mm:ss\"\n                      style=\"margin-right: 10px;width: 100%;\"\n                    />\n                  </el-form-item>\n                </el-col>\n              </el-row>\n              <el-row style=\"display:flex\">\n                <el-button type=\"primary\" icon=\"el-icon-search\" size=\"mini\" @click=\"fetchData()\">搜索</el-button>\n                <el-button icon=\"el-icon-refresh\" size=\"mini\" @click=\"resetData\">重置</el-button>\n              </el-row>\n            </el-form>\n          </div>\n\n\n          <!-- 工具条 -->\n          <div class=\"tools-div\">\n            <el-button type=\"success\" :disabled=\"$hasBP('bnt.sysUser.add')  === false\" icon=\"el-icon-plus\" size=\"mini\"\n                         @click=\"add\">添 加\n            </el-button>\n            <el-button class=\"btn-add\" size=\"mini\" @click=\"batchRemove()\" :disabled=\"$hasBP('bnt.sysUser.remove')  === false\">批量删除</el-button>\n            <!--上传文件-->\n            <el-upload\n              class=\"upload-demo\"\n              action=\"#\"\n              :on-preview=\"handlePreview\"\n              :on-remove=\"handleRemove\"\n              :before-remove=\"beforeRemove\"\n              multiple\n              :limit=\"1\"\n              :on-exceed=\"handleExceed\"\n              :file-list=\"fileList\"\n              :show-file-list=\"false\"\n              :http-request=\"uploadFile\"\n            >\n\n<!--              <el-button size=\"mini\" :disabled=\"$hasBP('bnt.sysUser.add')  === false\" type=\"primary\">导入数据</el-button>-->\n\n<!--              <span style=\"margin-left:4px\" slot=\"tip\" class=\"el-upload__tip\"><a :href=\"dowTempPath\" target=\"_blank\">下载模板</a></span>-->\n            </el-upload>\n            <el-button style=\"margin-left:8px\" size=\"mini\" :disabled=\"$hasBP('bnt.sysUser.list')  === false\" type=\"primary\" @click=\"exportData\">导出数据</el-button>\n          </div>\n\n\n          <!-- 列表 -->\n          <el-table\n            v-loading=\"listLoading\"\n            :data=\"list\"\n            stripe\n            border\n            :row-key=\"getRowKeys\"\n            style=\"width: 100%;margin-top: 10px;\"  @selection-change=\"handleSelectionChange\">\n\n            <el-table-column\n              label=\"序号\"\n              width=\"70\"\n              align=\"center\">\n              <template slot-scope=\"scope\">\n                {{ (page - 1) * limit + scope.$index + 1 }}\n              </template>\n            </el-table-column>\n            <el-table-column type=\"selection\"  :reserve-selection=\"true\"/>\n\n            <el-table-column prop=\"username\" label=\"用户名\"  width=\"65px\" show-overflow-tooltip=\"true\" />\n            <el-table-column prop=\"name\" label=\"姓名\" width=\"65px\"  show-overflow-tooltip=\"true\" />\n            <el-table-column prop=\"phone\" label=\"手机\" width=\"100px\" show-overflow-tooltip=\"true\"/>\n            <el-table-column prop=\"deptName\" label=\"所属部门\" show-overflow-tooltip=\"true\" />\n            <el-table-column label=\"状态\" width=\"65px\" show-overflow-tooltip=\"true\" >\n              <template slot-scope=\"scope\">\n                <el-switch\n                  v-model=\"scope.row.status===1\"\n                  @change=\"switchStatus(scope.row)\">\n                </el-switch>\n              </template>\n            </el-table-column>\n            <el-table-column prop=\"createTime\" label=\"创建时间\"  show-overflow-tooltip=\"true\"/>\n\n            <el-table-column label=\"操作\" align=\"center\" fixed=\"right\">\n              <template slot-scope=\"scope\">\n                <el-button type=\"primary\" :disabled=\"$hasBP('bnt.sysUser.update')  === false\" icon=\"el-icon-edit\" size=\"mini\" @click=\"edit(scope.row.id)\" title=\"修改\"/>\n                <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" @click=\"removeDataById(scope.row.id)\"\n                           :disabled=\"$hasBP('bnt.sysUser.remove')  === false\"   title=\"删除\"/>\n                <el-button type=\"warning\" icon=\"el-icon-baseball\" size=\"mini\" @click=\"showAssignRole(scope.row)\"\n                           :disabled=\"$hasBP('bnt.sysUser.update')  === false\"  title=\"分配角色\"/>\n              </template>\n            </el-table-column>\n          </el-table>\n\n          <!-- 分页组件 -->\n          <el-pagination\n            :current-page=\"page\"\n            :total=\"total\"\n            :page-size=\"limit\"\n            style=\"padding: 30px 0; text-align: center;\"\n            layout=\"total, prev, pager, next, jumper\"\n            @current-change=\"fetchData\"\n          />\n\n          <el-dialog title=\"分配角色\" :visible.sync=\"dialogRoleVisible\">\n            <el-form label-width=\"80px\">\n              <el-form-item label=\"用户名\">\n                <el-input disabled :value=\"sysUser.username\"></el-input>\n              </el-form-item>\n\n\n              <el-form-item label=\"角色列表\">\n                <el-checkbox :indeterminate=\"isIndeterminate\" v-model=\"checkAll\" @change=\"handleCheckAllChange\">全选\n                </el-checkbox>\n                <div style=\"margin: 15px 0;\"></div>\n                <el-checkbox-group v-model=\"userRoleIds\" @change=\"handleCheckedChange\">\n                  <el-checkbox v-for=\"role in allRoles\" :key=\"role.id\" :label=\"role.id\">{{role.roleName}}</el-checkbox>\n                </el-checkbox-group>\n              </el-form-item>\n            </el-form>\n            <div slot=\"footer\">\n              <el-button type=\"primary\" @click=\"assignRole\" size=\"small\">保存</el-button>\n              <el-button @click=\"dialogRoleVisible = false\" size=\"small\">取消</el-button>\n            </div>\n          </el-dialog>\n\n          <el-dialog title=\"添加/修改\" :visible.sync=\"dialogVisible\" width=\"40%\">\n            <el-form ref=\"dataForm\" :model=\"sysUser\" :rules=\"rules\" label-width=\"100px\" size=\"small\"\n                     style=\"padding-right: 40px;\">\n              <el-form-item label=\"用户名\" prop=\"username\">\n                <el-input v-model=\"sysUser.username\"/>\n              </el-form-item>\n              <el-form-item v-if=\"!sysUser.id\" label=\"密码\" prop=\"password\">\n                <el-input v-model=\"sysUser.password\" type=\"password\"/>\n              </el-form-item>\n              <el-form-item v-else label=\"新密码\" prop=\"newpassword\">\n                <el-input v-model=\"sysUser.newpassword\" type=\"password\"/>\n              </el-form-item>\n              <el-form-item label=\"姓名\" prop=\"name\">\n                <el-input v-model=\"sysUser.name\"/>\n              </el-form-item>\n              <el-form-item label=\"手机\" prop=\"phone\">\n                <el-input v-model=\"sysUser.phone\"/>\n              </el-form-item>\n\n              <el-form-item label=\"所属部门\" prop=\"deptIds\">\n                <el-tree\n                  ref=\"eltreeDept\"\n                  :data=\"dataDeptTree\"\n                  node-key=\"id\"\n                  show-checkbox\n                  :expand-on-click-node=\"false\"\n                  check-strictly=\"true\"\n                  :default-checked-keys=\"sysUser.deptIds\"\n                />\n              </el-form-item>\n              <el-form-item label=\"所属岗位\" prop=\"postId\">\n                <el-select\n                  v-model=\"sysUser.postId\"\n                  placeholder=\"所属岗位\">\n                  <el-option\n                    v-for=\"sysPost in sysPostX0d96aa0bList\"\n                    :key=\"sysPost.id\"\n                    :label=\"sysPost.name\"\n                    :value=\"sysPost.id\"/>\n                </el-select>\n              </el-form-item>\n\n\n            </el-form>\n            <span slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"dialogVisible = false\" size=\"small\" icon=\"el-icon-refresh-right\">取 消</el-button>\n        <el-button type=\"primary\" icon=\"el-icon-check\" @click=\"saveOrUpdate()\" size=\"small\">确 定</el-button>\n      </span>\n          </el-dialog>\n\n        </div>\n      </el-main>\n    </el-container>\n    </el-container>\n</template>\n<style>\n  .el-header {\n    background-color: #B3C0D1;\n    color: #333;\n    line-height: 60px;\n  }\n\n  .el-aside {\n    color: #333;\n  }\n\n  .upload-demo {\n    display: inline-block;\n    margin-left: 8px;\n  }\n</style>\n\n<script>\n    import api from '@/api/system/sysUser'\n    import roleApi from '@/api/system/sysRole'\n    import deptApi from '@/api/system/sysDept'\n    import {getToken} from '@/utils/auth'\n    import sysPostApi from '@/api/system/sysPost'\n\n    export default {\n        components: {\n            //导入树形选择组件\n            // SelectDeptTree: () => import('@/components/Custom/TreeSelect/TreeSelect')\n        },\n        data() {\n            let validOrgan = (rule, value, callback) => {\n                // 获取选中节点数组\n                let arr = this.$refs.eltreeDept.getCheckedKeys();\n                if(!arr || arr.length === 0) {\n                    callback(new Error('请选择关联机构'))\n                } else {\n                    callback();\n                }\n            }\n            return {\n                listLoading: false, // 数据是否正在加载\n                list: null, // 列表\n                total: 0, // 数据库中的总记录数\n                page: 1, // 默认页码\n                limit: 5, // 每页记录数\n                searchObj: {}, // 查询表单对象\n\n                createTimes: [],\n\n                dialogVisible: false,\n                sysUser: {},\n\n                dialogRoleVisible: false,\n                allRoles: [], // 所有角色列表\n                userRoleIds: [], // 用户的角色ID的列表\n                isIndeterminate: false, // 是否是不确定的\n                checkAll: false, // 是否全选\n                //////\n                dataDeptTree: [], //树形选择数据\n\n                //左侧树begin\n                searchDeptValue: '', //左侧部门搜索绑定\n                defaultDeptExpandedKeys: [],\n                selectedDeptValue: '',\n                selectedDeptName: '',\n                //左侧树end\n                 sysPostX0d96aa0bList:[],\n                selectValue:[], //复选框选择内容封装数组\n\n                fileList: [],\n                dowTempPath: process.env.VUE_APP_BASE_API + '/temp/temp.xlsx',\n\n                rules: {\n                    username: [\n                        {required: true, message: '请输入用户名', trigger: 'blur'},\n                        {min: 2, message: '长度在 2个字符以上', trigger: 'blur'}\n                    ],\n                    name: [\n                        {required: true, message: '请输入姓名', trigger: 'blur'}\n                    ],\n                    phone: [\n                        {required: true, message: '请输入手机', trigger: 'blur'}\n                    ],\n                    password: [\n                        {required: true, message: '请输入密码', trigger: 'blur'}\n                    ],\n                    deptIds: [\n                        {required: true,validator:validOrgan, trigger: 'change' }\n                    ]\n\n                }\n\n\n            }\n        },\n        created() {\n            //调用列表方法\n            this.fetchData()\n            this.fetchPopDept()\n            this.getAllSysPostX0d96aa0b()\n        },\n        watch: {\n            //监听左侧树查询事件\n            searchDeptValue(value) {\n                this.$refs.eltree.filter(value)\n            }\n        },\n        methods: {\n            //回调保存选择的部门id\n            // saveDeptId(treeId) {\n            //     this.sysUser.deptId = treeId\n            //     this.sysUser.deptName= treeName\n            //     this.$refs[\"dataForm\"].clearValidate(\"deptId\")\n            //     this.rules.deptId=[]\n            // },\n\n            getRowKeys(row) {\n                return row.id\n            },\n\n            //复选框发生变化执行方法\n            handleSelectionChange(selection) {\n                this.selectValue = selection\n                //console.log(this.selectValue)\n            },\n\n            //批量删除\n            batchRemove() {\n                //判断\n                if (this.selectValue.length == 0) {\n                    this.$message.warning('请选择要删除的记录！')\n                    return\n                }\n                this.$confirm('此操作将永久删除, 是否继续?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }).then(() => {\n                    //数组\n                    var idList = []\n                    //获取多个复选框对应id，封装到数组里面\n                    // [1,2,3]\n                    for (var i = 0; i < this.selectValue.length; i++) {\n                        var obj = this.selectValue[i]\n                        //id值\n                        var id = obj.id\n                        //放到数组里面\n                        idList.push(id)\n                    }\n                    api.batchRemove(idList).then(response => {\n                        //提示\n                        this.$message({\n                            type: 'success',\n                            message: '删除成功!'\n                        });\n                        //刷新\n                        this.fetchData()\n                    })\n                })\n            },\n\n            //导出数据\n            exportData() {\n                window.open(process.env.VUE_APP_BASE_API + '/admin/system/sysUser/export?token=' + getToken());\n            },\n\n            getAllSysPostX0d96aa0b() {\n                let queryObj = {}\n                sysPostApi.getAllSysPost(queryObj)\n                    .then(response => {\n                        this.sysPostX0d96aa0bList = response.data\n                    })\n            },\n\n            fetchPopDept() {\n                //加载选择部门数据\n                deptApi.findSelectNodes().then(response => {\n                    this.dataDeptTree = response.data\n                })\n\n            },\n\n\n            //左侧树形方法begin\n            // 树节点选中改变\n            handleDeptTreeSelectChange(data) {\n                this.selectedDeptValue = data.id\n                this.selectedDeptName = data.label\n                //重新加载主数据\n                this.searchObj.deptId = data.id\n                this.fetchData(this.page)\n            },\n            filterDeptNode(value, data) {\n                if (!value) return true\n                return data.label.indexOf(value) !== -1\n            },\n            //左侧树形方法end\n\n            //上传文件begin\n            handleRemove(file, fileList) {\n                console.log(file, fileList);\n            },\n            handlePreview(file) {\n                console.log(file);\n            },\n            handleExceed(files, fileList) {\n                this.$message.warning(`一次只能选择一个文件`);\n            },\n            beforeRemove(file, fileList) {\n                return this.$confirm(`确定移除 ${file.name}？`);\n            },\n\n            //参数必须是param，才能获取到内容\n            uploadFile(param) {\n                // 获取上传的文件名\n                var file = param.file\n                //发送请求的参数格式为FormData\n                const formData = new FormData();\n                formData.append(\"file\", file)\n                api.uploadFile(formData)\n                    .then((res) => {\n                        if (res.code == 200) {\n                            //提示\n                            this.$message({\n                                type: 'success',\n                                message: '导入成功!'\n                            });\n                            this.fetchData(this.page);\n                            this.fileList = []\n                        }\n                        //this.refs.upload.clearFiles();\n                    })\n                    .catch((err) => {\n                        this.fileList = []\n                    });\n            },\n\n\n            //上传文件end\n\n\n            //列表\n            fetchData(page = 1) {\n                this.page = page\n                if (this.createTimes && this.createTimes.length == 2) {\n                    this.searchObj.createTimeBegin = this.createTimes[0]\n                    this.searchObj.createTimeEnd = this.createTimes[1]\n                }\n                api.getPageList(this.page, this.limit, this.searchObj)\n                    .then(response => {\n                        this.list = response.data.records\n                        this.total = response.data.total\n\n                    })\n            },\n\n            //展示分配角色\n            showAssignRole(row) {\n                this.sysUser = row\n                this.dialogRoleVisible = true\n                roleApi.getRolesByUserId(row.id).then(response => {\n                    this.allRoles = response.data.allRoles\n                    console.log(this.allRoles)\n                    this.userRoleIds = response.data.userRoleIds\n                    console.log(this.userRoleIds)\n                    this.checkAll = this.userRoleIds.length === this.allRoles.length\n                    this.isIndeterminate = this.userRoleIds.length > 0 && this.userRoleIds.length < this.allRoles.length\n                })\n            },\n\n            /*\n            全选勾选状态发生改变的监听\n            */\n            handleCheckAllChange(value) {// value 当前勾选状态true/false\n                // 如果当前全选, userRoleIds就是所有角色id的数组, 否则是空数组\n                this.userRoleIds = value ? this.allRoles.map(item => item.id) : []\n                // 如果当前不是全选也不全不选时, 指定为false\n                this.isIndeterminate = false\n            },\n\n            /*\n            角色列表选中项发生改变的监听\n            */\n            handleCheckedChange(value) {\n                const {userRoleIds, allRoles} = this\n                this.checkAll = userRoleIds.length === allRoles.length && allRoles.length > 0\n                this.isIndeterminate = userRoleIds.length > 0 && userRoleIds.length < allRoles.length\n            },\n\n            //分配角色\n            assignRole() {\n                let assginRoleVo = {\n                    userId: this.sysUser.id,\n                    roleIdList: this.userRoleIds\n                }\n                roleApi.assignRoles(assginRoleVo).then(response => {\n                    this.$message.success(response.message || '分配角色成功')\n                    this.dialogRoleVisible = false\n                    this.fetchData(this.page)\n                })\n            },\n            //更改用户状态\n            switchStatus(row) {\n                //判断，如果当前用户可用，修改禁用\n                row.status = row.status === 1 ? 0 : 1\n                api.updateStatus(row.id, row.status)\n                    .then(response => {\n                        this.$message.success(response.message || '操作成功')\n                        this.fetchData()\n                    })\n            },\n            //删除\n            removeDataById(id) {\n                this.$confirm('此操作将永久删除该用户, 是否继续?', '提示', {\n                    confirmButtonText: '确定',\n                    cancelButtonText: '取消',\n                    type: 'warning'\n                }).then(() => {\n                    //调用方法删除\n                    api.removeById(id)\n                        .then(response => {\n                            //提示\n                            this.$message({\n                                type: 'success',\n                                message: '删除成功!'\n                            });\n                            //刷新\n                            this.fetchData()\n                        })\n                })\n            },\n            //根据id查询，数据回显\n            edit(id) {\n                //弹出框\n                this.dialogVisible = true\n                //调用接口查询\n                api.getUserId(id)\n                    .then(response => {\n                        this.$nextTick(function () {\n                            this.$refs.eltreeDept.setCheckedKeys([]);\n                            this.sysUser = response.data\n                        })\n                    })\n            },\n            //添加或者修改方法\n            saveOrUpdate() {\n\n                // 第三步,点击提交表单按钮的时候判断是否符合校验规则,符合才会往下运行,不符合会\n                // 按照你定义的校验规则提示警告\n                this.$refs.dataForm.validate((valid) => {\n                    if (valid) {\n                        this.sysUser.deptIds = this.$refs.eltreeDept.getCheckedKeys();\n                        if (!this.sysUser.id) {\n                            this.save()\n                        } else {\n                            this.update()\n                        }\n\n                    } else {\n                        console.log('error submit!!');\n                        return false;\n                    }\n                });\n            },\n            //修改\n            update() {\n                api.update(this.sysUser)\n                    .then(response => {\n                        //提示\n                        this.$message.success('操作成功')\n                        //关闭弹框\n                        this.dialogVisible = false\n                        //刷新\n                        this.fetchData()\n                    })\n            },\n            //添加\n            save() {\n                api.save(this.sysUser)\n                    .then(response => {\n                        //提示\n                        this.$message.success('操作成功')\n                        //关闭弹框\n                        this.dialogVisible = false\n                        //刷新\n                        this.fetchData()\n                    })\n            },\n            //添加弹框的方法\n            add() {\n                this.dialogVisible = true\n                this.sysUser = {}\n                this.$nextTick(function () {\n                    this.$refs.eltreeDept.setCheckedKeys([]);\n                })\n            },\n            // 重置查询表单\n            resetData() {\n                console.log('重置查询表单')\n                this.searchObj = {}\n                this.createTimes = []\n                this.fetchData()\n            }\n\n        }\n    }\n</script>\n"]}]}