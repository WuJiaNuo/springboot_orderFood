{"remainingRequest":"F:\\project\\ksmg\\exam-vue\\node_modules\\thread-loader\\dist\\cjs.js!F:\\project\\ksmg\\exam-vue\\node_modules\\babel-loader\\lib\\index.js!F:\\project\\ksmg\\exam-vue\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\project\\ksmg\\exam-vue\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\project\\ksmg\\exam-vue\\src\\views\\pages\\Question.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\project\\ksmg\\exam-vue\\src\\views\\pages\\Question.vue","mtime":1703214386157},{"path":"F:\\project\\ksmg\\exam-vue\\babel.config.js","mtime":1698853375725},{"path":"F:\\project\\ksmg\\exam-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\project\\ksmg\\exam-vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\project\\ksmg\\exam-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"F:\\project\\ksmg\\exam-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\project\\ksmg\\exam-vue\\node_modules\\vue-loader\\lib\\index.js","mtime":1655715099000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}