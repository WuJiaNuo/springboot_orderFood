{"remainingRequest":"F:\\project\\ksmg\\exam-vue\\node_modules\\thread-loader\\dist\\cjs.js!F:\\project\\ksmg\\exam-vue\\node_modules\\babel-loader\\lib\\index.js!F:\\project\\ksmg\\exam-vue\\src\\permission.js","dependencies":[{"path":"F:\\project\\ksmg\\exam-vue\\src\\permission.js","mtime":1679940806982},{"path":"F:\\project\\ksmg\\exam-vue\\babel.config.js","mtime":1698853375725},{"path":"F:\\project\\ksmg\\exam-vue\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\project\\ksmg\\exam-vue\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\project\\ksmg\\exam-vue\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiRjovcHJvamVjdC9rc21nL2V4YW0tdnVlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9yZWdlbmVyYXRvclJ1bnRpbWUuanMiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICJGOi9wcm9qZWN0L2tzbWcvZXhhbS12dWUvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiRjovcHJvamVjdC9rc21nL2V4YW0tdnVlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgcm91dGVyIGZyb20gJy4vcm91dGVyJzsKaW1wb3J0IHN0b3JlIGZyb20gJy4vc3RvcmUnOwppbXBvcnQgeyBnZXRUb2tlbiB9IGZyb20gJ0AvdXRpbHMvYXV0aCc7CmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tICdlbGVtZW50LXVpJzsKaW1wb3J0IE5Qcm9ncmVzcyBmcm9tICducHJvZ3Jlc3MnOyAvLyDmsLTlubPov5vluqbmnaHmj5DnpLo6IOWcqOi3s+i9rOi3r+eUseaXtuS9v+eUqAoKaW1wb3J0ICducHJvZ3Jlc3MvbnByb2dyZXNzLmNzcyc7IC8vIOawtOW5s+i/m+W6puadoeagt+W8jwoKaW1wb3J0IGdldFBhZ2VUaXRsZSBmcm9tICdAL3V0aWxzL2dldC1wYWdlLXRpdGxlJzsgLy8g6I635Y+W5bqU55So5aS06YOo5qCH6aKY55qE5Ye95pWwCgppbXBvcnQgTGF5b3V0IGZyb20gJ0AvbGF5b3V0JzsKaW1wb3J0IFBhcmVudFZpZXcgZnJvbSAnQC9jb21wb25lbnRzL1BhcmVudFZpZXcnOwoKdmFyIF9pbXBvcnQgPSByZXF1aXJlKCcuL3JvdXRlci9faW1wb3J0XycgKyBwcm9jZXNzLmVudi5OT0RFX0VOVik7IC8vIOiOt+WPlue7hOS7tueahOaWueazlQoKCk5Qcm9ncmVzcy5jb25maWd1cmUoewogIHNob3dTcGlubmVyOiBmYWxzZQp9KTsgLy8gTlByb2dyZXNzIENvbmZpZ3VyYXRpb24KCnZhciB3aGl0ZUxpc3QgPSBbJy9sb2dpbiddOyAvLyBubyByZWRpcmVjdCB3aGl0ZWxpc3QKCnJvdXRlci5iZWZvcmVFYWNoKCAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lKCkubWFyayhmdW5jdGlvbiBfY2FsbGVlKHRvLCBmcm9tLCBuZXh0KSB7CiAgICB2YXIgaGFzVG9rZW4sIGhhc0dldFVzZXJJbmZvLCBtZW51cywgbGFzdFJvdTsKICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICB3aGlsZSAoMSkgewogICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgTlByb2dyZXNzLnN0YXJ0KCk7IC8vIHNldCBwYWdlIHRpdGxlCgogICAgICAgICAgICBkb2N1bWVudC50aXRsZSA9IGdldFBhZ2VUaXRsZSh0by5tZXRhLnRpdGxlKTsgLy8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHVzZXIgaGFzIGxvZ2dlZCBpbgoKICAgICAgICAgICAgaGFzVG9rZW4gPSBnZXRUb2tlbigpOwoKICAgICAgICAgICAgaWYgKCFoYXNUb2tlbikgewogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzNjsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKCEodG8ucGF0aCA9PT0gJy9sb2dpbicpKSB7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIGlmIGlzIGxvZ2dlZCBpbiwgcmVkaXJlY3QgdG8gdGhlIGhvbWUgcGFnZQogICAgICAgICAgICBuZXh0KHsKICAgICAgICAgICAgICBwYXRoOiAnLycKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIE5Qcm9ncmVzcy5kb25lKCk7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzNDsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICBoYXNHZXRVc2VySW5mbyA9IHN0b3JlLmdldHRlcnMubmFtZTsKCiAgICAgICAgICAgIGlmICghaGFzR2V0VXNlckluZm8pIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTQ7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG5leHQoKTsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDM0OwogICAgICAgICAgICBicmVhazsKCiAgICAgICAgICBjYXNlIDE0OgogICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTQ7CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAxNzsKICAgICAgICAgICAgcmV0dXJuIHN0b3JlLmRpc3BhdGNoKCd1c2VyL2dldEluZm8nKTsKCiAgICAgICAgICBjYXNlIDE3OgogICAgICAgICAgICAvLyDor7fmsYLojrflj5bnlKjmiLfkv6Hmga8KICAgICAgICAgICAgaWYgKHN0b3JlLmdldHRlcnMubWVudXMubGVuZ3RoIDwgMSkgewogICAgICAgICAgICAgIGdsb2JhbC5hbnRSb3V0ZXIgPSBbXTsKICAgICAgICAgICAgICBuZXh0KCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG1lbnVzID0gZmlsdGVyQXN5bmNSb3V0ZXIoc3RvcmUuZ2V0dGVycy5tZW51cyk7IC8vIDEu6L+H5ruk6Lev55SxCiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ21lbnVzPScrSlNPTi5wYXJzZShtZW51cykpCgogICAgICAgICAgICByb3V0ZXIuYWRkUm91dGVzKG1lbnVzKTsgLy8gMi7liqjmgIHmt7vliqDot6/nlLEKCiAgICAgICAgICAgIGxhc3RSb3UgPSBbewogICAgICAgICAgICAgIHBhdGg6ICcqJywKICAgICAgICAgICAgICByZWRpcmVjdDogJy80MDQnLAogICAgICAgICAgICAgIGhpZGRlbjogdHJ1ZQogICAgICAgICAgICB9XTsKICAgICAgICAgICAgcm91dGVyLmFkZFJvdXRlcyhsYXN0Um91KTsKICAgICAgICAgICAgZ2xvYmFsLmFudFJvdXRlciA9IG1lbnVzOyAvLyAzLuWwhui3r+eUseaVsOaNruS8oOmAkue7meWFqOWxgOWPmOmHj++8jOWBmuS+p+i+ueagj+iPnOWNlea4suafk+W3peS9nAoKICAgICAgICAgICAgbmV4dChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHRvKSwge30sIHsKICAgICAgICAgICAgICByZXBsYWNlOiB0cnVlCiAgICAgICAgICAgIH0pKTsgLy9uZXh0KCkKCiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzNDsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDI2OwogICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDE0KTsKICAgICAgICAgICAgLy8gcmVtb3ZlIHRva2VuIGFuZCBnbyB0byBsb2dpbiBwYWdlIHRvIHJlLWxvZ2luCiAgICAgICAgICAgIGNvbnNvbGUubG9nKF9jb250ZXh0LnQwKTsKICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDMxOwogICAgICAgICAgICByZXR1cm4gc3RvcmUuZGlzcGF0Y2goJ3VzZXIvcmVzZXRUb2tlbicpOwoKICAgICAgICAgIGNhc2UgMzE6CiAgICAgICAgICAgIE1lc3NhZ2UuZXJyb3IoX2NvbnRleHQudDAgfHwgJ0hhcyBFcnJvcicpOwogICAgICAgICAgICBuZXh0KCIvbG9naW4/cmVkaXJlY3Q9Ii5jb25jYXQodG8ucGF0aCkpOwogICAgICAgICAgICBOUHJvZ3Jlc3MuZG9uZSgpOwoKICAgICAgICAgIGNhc2UgMzQ6CiAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzNzsKICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgY2FzZSAzNjoKICAgICAgICAgICAgLyogaGFzIG5vIHRva2VuKi8KICAgICAgICAgICAgaWYgKHdoaXRlTGlzdC5pbmRleE9mKHRvLnBhdGgpICE9PSAtMSkgewogICAgICAgICAgICAgIC8vIGluIHRoZSBmcmVlIGxvZ2luIHdoaXRlbGlzdCwgZ28gZGlyZWN0bHkKICAgICAgICAgICAgICBuZXh0KCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgLy8gb3RoZXIgcGFnZXMgdGhhdCBkbyBub3QgaGF2ZSBwZXJtaXNzaW9uIHRvIGFjY2VzcyBhcmUgcmVkaXJlY3RlZCB0byB0aGUgbG9naW4gcGFnZS4KICAgICAgICAgICAgICBuZXh0KCIvbG9naW4/cmVkaXJlY3Q9Ii5jb25jYXQodG8ucGF0aCkpOwogICAgICAgICAgICAgIE5Qcm9ncmVzcy5kb25lKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICBjYXNlIDM3OgogICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sIF9jYWxsZWUsIG51bGwsIFtbMTQsIDI2XV0pOwogIH0pKTsKCiAgcmV0dXJuIGZ1bmN0aW9uIChfeCwgX3gyLCBfeDMpIHsKICAgIHJldHVybiBfcmVmLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgfTsKfSgpKTsKcm91dGVyLmFmdGVyRWFjaChmdW5jdGlvbiAoKSB7CiAgLy8gZmluaXNoIHByb2dyZXNzIGJhcgogIE5Qcm9ncmVzcy5kb25lKCk7Cn0pOyAvLyAvLyDpgY3ljoblkI7lj7DkvKDmnaXnmoTot6/nlLHlrZfnrKbkuLLvvIzovazmjaLkuLrnu4Tku7blr7nosaEKCmZ1bmN0aW9uIGZpbHRlckFzeW5jUm91dGVyKGFzeW5jUm91dGVyTWFwKSB7CiAgdmFyIGFjY2Vzc2VkUm91dGVycyA9IGFzeW5jUm91dGVyTWFwLmZpbHRlcihmdW5jdGlvbiAocm91dGUpIHsKICAgIGlmIChyb3V0ZS5jb21wb25lbnQpIHsKICAgICAgY29uc29sZS5sb2coJ3JvdXRlLmNvbXBvbmVudD0nICsgcm91dGUuY29tcG9uZW50KTsKCiAgICAgIGlmIChyb3V0ZS5jb21wb25lbnQgPT09ICdMYXlvdXQnKSB7CiAgICAgICAgcm91dGUuY29tcG9uZW50ID0gTGF5b3V0OwogICAgICB9IGVsc2UgaWYgKHJvdXRlLmNvbXBvbmVudCA9PT0gJ1BhcmVudFZpZXcnKSB7CiAgICAgICAgcm91dGUuY29tcG9uZW50ID0gUGFyZW50VmlldzsKICAgICAgfSBlbHNlIHsKICAgICAgICB0cnkgewogICAgICAgICAgcm91dGUuY29tcG9uZW50ID0gX2ltcG9ydChyb3V0ZS5jb21wb25lbnQpOyAvLyDlr7zlhaXnu4Tku7YKICAgICAgICB9IGNhdGNoIChlcnJvcikgewogICAgICAgICAgZGVidWdnZXI7CiAgICAgICAgICBjb25zb2xlLmxvZyhlcnJvcik7CiAgICAgICAgICByb3V0ZS5jb21wb25lbnQgPSBfaW1wb3J0KCdkYXNoYm9hcmQvaW5kZXgnKTsgLy8g5a+85YWl57uE5Lu2CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgaWYgKHJvdXRlLmNoaWxkcmVuICYmIHJvdXRlLmNoaWxkcmVuLmxlbmd0aCA+IDApIHsKICAgICAgcm91dGUuY2hpbGRyZW4gPSBmaWx0ZXJBc3luY1JvdXRlcihyb3V0ZS5jaGlsZHJlbik7CiAgICB9IGVsc2UgewogICAgICBkZWxldGUgcm91dGUuY2hpbGRyZW47CiAgICB9CgogICAgcmV0dXJuIHRydWU7CiAgfSk7CiAgcmV0dXJuIGFjY2Vzc2VkUm91dGVyczsKfQ=="},null]}